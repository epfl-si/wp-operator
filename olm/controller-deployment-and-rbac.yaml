# Any and all Kubernetes objects that are necessary and sufficient
# to run the controller as a pod.

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress-olm-controller
  namespace: placeholder
spec:
  selector:
    matchLabels:
      wordpress-operator-role: olm-controller
  replicas: 1
  template:
    metadata:
      labels:
        wordpress-operator-role: olm-controller
    spec:
      securityContext:
        runAsNonRoot: true
      serviceAccountName: wordpress-olm-controller
      containers:
      - name: controller
#       image: controller:latest
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 10m
            memory: 128Mi
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: wordpress-olm-controller
rules:
# The controller needs permission to create and delete all
# objects in ../operator-non-namespaced.yaml:
- apiGroups:
  - networking.k8s.io
  resources:
  - ingressclasses
  resourceNames:
  - wordpress
  verbs: ["*"]
- apiGroups:
  - networking.k8s.io
  resources:
  - ingressclasses
  # âš  `resourceNames` doesn't work on the "create" verb;
  # see https://stackoverflow.com/a/65219397 . Bummer
  verbs: ["create", "get", "list", "watch"]
# Likewise, the controller needs to create and delete all
# objects in  ../operator-namespaced.yaml:
- apiGroups:
  - apps
  resources:
  - deployments
  resourceNames:
  - wp-operator
  verbs: ["*"]
- apiGroups:
  - apps
  resources:
  - deployments
  verbs: ["create", "get", "list", "watch"]
- apiGroups: [""]
  resources: ["serviceaccounts"]
  resourceNames: ["wp-operator"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["serviceaccounts"]
  verbs: ["create", "get", "list", "watch"]
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - rolebindings
  - roles
  resourceNames:
  - wp-operator
  verbs: ["*"]
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - rolebindings
  - roles
  verbs: ["create", "get", "list", "watch"]
# And on top of all that, the controller is only able
# to grant permissions (by means of creating `Role` objects)
# if it wields said permissions itself:
# (see: https://kubernetes.io/docs/reference/access-authn-authz/rbac/#restrictions-on-role-creation-or-update)
- apiGroups: ['wordpress.epfl.ch']
  resources:
  - wordpresssites
  - wordpresssites/status
  verbs: ['*']
- apiGroups: ['networking.k8s.io']
  resources:
  - ingresses
  verbs: ['*']
- apiGroups: ['']
  resources:
  - events
  verbs: ['create', 'patch']
- apiGroups: ['k8s.mariadb.com']
  resources:
  - backups
  - connections
  - databases
  - grants
  - mariadbs
  - restores
  - sqljobs
  - users
  verbs: ['*']
- apiGroups: ['']
  resources:
  - secrets
  verbs: ['*']
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: wordpress-olm-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: wordpress-olm-controller
subjects:
- kind: ServiceAccount
  name: wordpress-olm-controller
  namespace: placeholder
